{
  tokens = [
    SEMI=';'
    LBRACKET='['
    RBRACKET=']'
    LPAREN='('
    RPAREN=')'
    LCURLY='{'
    RCURLY='}'
    COMMA=','
    COLON=':'

    // types
    STRING='string'
    INT32='int32'
    INT64='int64'
    DECIMAL='decimal'
    DOUBLE='double'
    BOOLEAN='boolean'
    OBJECT='object'
    MAP='map'
    BYTES='bytes'
    RESULT='result'

    space='regexp:\s+'
    name='regexp:\w+'
    comment='regexp:(///.*)'
    number='regexp:\d+(\.\d*)?'
    string='regexp:"[^"]*"'
    namespace='regexp:\w[.\w]*'
  ]

  parserClass="com.facilityapi.parser.SimpleParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="com.facilityapi.psi"
  psiImplPackage="com.facilityapi.psi.impl"

  elementTypeHolderClass="com.facilityapi.psi.FsdTypes"
  elementTypeClass="com.facilityapi.psi.FsdElementType"
  tokenTypeClass="com.facilityapi.psi.FsdTokenType"
}

file ::= top_level_element+
top_level_element ::= service_declaration | comment

parameter ::= name colon parameter_value
parameter_value ::= string | number | namespace

attribute_section ::= attribute_begin attribute attribute_end {pin=1 recoverWhile=attribute_end}
attribute ::= name attribute_parameters?
private attribute_begin ::= lbracket
private attribute_end ::= rbracket

attribute_parameters ::= attribute_parameters_begin parameter (',' parameter)* attribute_parameters_end {pin=1 recoverWhile=attribute_parameters_end}
private attribute_parameters_begin ::= lparen
private attribute_parameters_end ::= rparen

method_declaration ::= attribute_section* method name method_definition
private method_definition ::= method_parameters colon method_return_values
private method_parameters ::= block_begin property* block_end {pin=1 recoverWhile=block_end}
private method_return_values ::= block_begin property* block_end {pin=1 recoverWhile=block_end}

service_declaration ::= attribute_section* service name service_definition
service_definition ::= block_begin (comment | method_declaration | enum_declaration | data_declaration | errors_declaration)*  {pin=1 recoverWhile=block_end}

data_declaration ::= attribute_section* data name data_definition
data_definition ::= (comment | property)*

enum_declaration ::= attribute_section* enum name enum_definition
enum_definition ::= comment* name (comma comment name)*

errors_declaration ::= attribute_section* ERRORS name errors_definition
errors_definition ::= comment* name (comma comment? name)*

property ::= name colon built_in_type property_terminal {pin=1 recoverWhile=property_terminal}
private property_terminal ::= semi

built_in_type ::= STRING|INT32|INT64|DECIMAL|DOUBLE|BOOLEAN|OBJECT|MAP|BYTES|RESULT|ERRORS

private block_begin ::= LCURLY
private block_end ::= RCURLY