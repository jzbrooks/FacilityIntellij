{
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  parserClass="com.facilityapi.parser.FsdParser"

  psiClassPrefix="Fsd"
  psiImplClassSuffix="Impl"
  psiPackage="com.facilityapi.psi"
  psiImplPackage="com.facilityapi.psi.impl"

  elementTypeHolderClass="com.facilityapi.psi.FsdTypes"
  elementTypeClass="com.facilityapi.psi.FsdElementType"
  tokenTypeClass="com.facilityapi.psi.FsdTokenType"

  tokens = [
    SEMI=';'
    LBRACKET='['
    RBRACKET=']'
    LPAREN='('
    RPAREN=')'
    LCURLY='{'
    RCURLY='}'
    COMMA=','
    COLON=':'

    space='regexp:\s+'
    name='regexp:[a-zA-Z_][a-zA-Z_0-9]*'
    comment='regexp:(///.*)'
    number='regexp:\d+(\.\d*)?'
    string='regexp:"[^"]*"'
    namespace='regexp:\w[.\w]*'
  ]
}

file ::= top_level_element*
top_level_element ::= comment | service_declaration | attribute_section

attribute_section ::= attribute_begin attribute attribute_end {pin=1 recoverWhile=attribute_end}
attribute ::= name attribute_parameters?
private attribute_begin ::= lbracket
private attribute_end ::= rbracket

attribute_parameters ::= attribute_parameters_begin parameter_list attribute_parameters_end {pin=1 recoverWhile=attribute_parameters_end}
private attribute_parameters_begin ::= lparen
private attribute_parameters_end ::= rparen

private parameter_list ::= parameter (',' parameter)*
private parameter ::= name colon parameter_value
private parameter_value ::= string | number | namespace

method_declaration ::= method name method_definition
private method_definition ::= method_parameters colon method_return_values
private method_parameters ::= block_begin property* block_end {pin=1 recoverWhile=block_end}
private method_return_values ::= block_begin property* block_end {pin=1 recoverWhile=block_end}

service_declaration ::= service name service_definition
private service_definition ::= block_begin {comment | attribute_section | method_declaration | enum_declaration | data_declaration | errors_declaration} *  block_end {pin=1 recoverWhile=block_end}

data_declaration ::= data name data_definition
data_definition ::= (comment | property)*

enum_declaration ::= enum name enum_definition
enum_definition ::= comment* name (comma comment name)*

errors_declaration ::= errors name errors_definition
errors_definition ::= comment* name (comma comment? name)*

property ::= name colon built_in_type property_terminal {pin=1 recoverWhile=property_terminal}
private property_terminal ::= semi

built_in_type ::= string|int32|int64|decimal|double|boolean|object|map|bytes|result

private block_begin ::= LCURLY
private block_end ::= RCURLY